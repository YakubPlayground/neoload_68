pipeline {
  agent none
  environment {
    ENABLE_API_SANITY = false
    API_TEST_DURATION_MINS = 2
    MAX_VUS_CHECKOUT = 50
    EUX_THREADS = 2
    ENABLE_FULL_WEB = true
    E2E_TEST_DURATION_MINS = 10
  }
  stages {
    stage('Grab Infra Repo') {
      agent { label 'master' }
      steps {
        git(branch: "$NL_VERSION", url: 'https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/infrastructure', credentialsId: 'CodeCommit')
      }
    }
    stage('Start NeoLoad infrastructure') {
      agent { label 'master' }
      steps {
        sh 'docker-compose -f neoload/lg/docker-compose.yml up -d'
        sh "mkdir -p $WORKSPACE/logs"
        stash includes: 'neoload/lg/lg.yaml', name: 'yaml-LG'
        stash includes: 'neoload/lg/local-lg.txt', name: 'local-LG'
        stash includes: 'neoload/lg/docker-lg.txt', name: 'docker-LG'
      }
    }
    stage('Define Dynamic Scenario') {
      agent { label 'master' }
      steps {
        script {
          if(env.ENABLE_API_SANITY.toBoolean()) { // create a dynamic API sanity scenario
            writeFile file: "yaml/api-only.yaml", text: """
scenarios:
- name: dynAPISanityCheck
  populations:
  - name: popAPIs
    rampup_load:
      duration: ${env.API_TEST_DURATION_MINS}m
      min_users: 1
      max_users: 5
      increment_users: 1
      increment_every: 10s
          """
            stash includes: 'yaml/api-only.yaml', name: 'yaml-api'
          }

          if(env.ENABLE_FULL_WEB.toBoolean()) { // create a dynamic full scenario
            writeFile file: "yaml/eux-and-apm.yaml", text: """
scenarios:
- name: dynMixedScenarioEUXwAPM
  populations:
  - name: API_just_ushahidi
    rampup_load:
      duration: ${env.E2E_TEST_DURATION_MINS}m
      min_users: 1
      max_users: 5
      increment_users: 1
      increment_every: 10s
  - name: popPost
    rampup_load:
      duration: ${env.E2E_TEST_DURATION_MINS}m
      min_users: 1
      max_users: 15
      increment_users: 1
      increment_every: 15s
  - name: dynatracePop
    constant_load:
      duration: ${env.E2E_TEST_DURATION_MINS}m
      users: 1
  - name: popSelenium
    rampup_load:
      duration: ${env.E2E_TEST_DURATION_MINS}m
      min_users: 1
      max_users: ${env.EUX_THREADS}
      increment_users: 1
      increment_every: 20s
          """
            stash includes: 'yaml/eux-and-apm.yaml', name: 'yaml-e2e'
          }
        }
      }
    }
    stage('Load Tests') {
      agent {
        dockerfile {
          args '--user root -v /tmp:/tmp --network cpv -p 7400:7400 -v /var/lib/jenkins/workspace/NL-test/logs:/root/.neotys/neoload/v6.8/logs:rw,z'
          dir 'neoload/controller'
        }
      }
      stages {
        stage('Git Project') {
          steps {
            dir('neoload_68') {
              git(branch: 'develop', url: 'https://github.com/paulsbruce/neoload_68.git')
            }
          }
        }
        stage('Sanity Check') {
          steps {
            script {
              if(env.ENABLE_API_SANITY.toBoolean()) {
                unstash 'docker-LG'
                unstash 'yaml-api'

                  neoloadRun executable: '/home/neoload/neoload/bin/NeoLoadCmd',
                    project: "$WORKSPACE/neoload_68/demo.nlp",
                    scenario: "dynAPISanityCheck",
                    testName: "API Sanity Check (build ${BUILD_NUMBER})",
                    testDescription: "A short, small API load test",
                    autoArchive: 'false', // will be streaming to NeoLoad Web, no need for classic report outputs
                    sharedLicense: [
                        server: 'NeoLoad Demo License',
                        duration: 1,
                        vuCount: env.MAX_VUS_CHECKOUT
                    ],
                    commandLineOption: "-nlweb -nlwebToken a8e8f0c5a4f90c02bfddcb6881e7f6811da26864879a7bd6 -variables"+
                                       " app_server_hostname=10.0.0.10"+ // dynamic target stack
                                       " -project $WORKSPACE/neoload_68/yaml/demo-mixed.yaml"+ // static file from repo
                                       " -project $WORKSPACE/yaml/api-only.yaml"+ // dynamic file from above
                                       " -L popAPIs=$WORKSPACE/neoload/lg/docker-lg.txt"+ // dynamic from above
                                       ""
              } else {
                archiveArtifacts 'logs/**'
                echo "Sanity check skipped by configuration"
              }
            }
          }
        }
        stage('Full E2E') {
          parallel {
            stage('Load with APM and EUX') {
                steps {
                    script { // plugin for scripted pipeline, fit to declarative syntax
                      if(env.ENABLE_FULL_WEB.toBoolean()) {
                        unstash 'local-LG'
                        unstash 'docker-LG'
                        unstash 'yaml-e2e'
                        try { // archive results regardless of overall success/fail (could be due to SLAs)

                          neoloadRun executable: '/home/neoload/neoload/bin/NeoLoadCmd',
                              project: "${env.WORKSPACE}/neoload_68/demo.nlp",
                              scenario: "dynMixedScenarioEUXwAPM",
                              testName: "Load Test w/ APM (build ${BUILD_NUMBER})",
                              testDescription: "Based on demo-mixed.yaml",
                              reportXml: "${env.WORKSPACE}/neoload-report/neoload-report.xml",
                              reportHtml: "${env.WORKSPACE}/neoload-report/neoload-report.html",
                              reportJunit: "${env.WORKSPACE}/neoload-report/junit-sla-results.xml",
                              trendGraphs: ['AvgResponseTime', 'ErrorRate'],
                              //autoArchive: 'false', // by default, the plugin runs archiveArtifacts "neoload-report/**"; junit allowEmptyResults: true, testResults: 'neoload-report/junit*.xml'
                              sharedLicense: [
                                  server: 'NeoLoad Demo License',
                                  duration: 1,
                                  vuCount: env.MAX_VUS_CHECKOUT
                              ],
                              commandLineOption: "-nlweb -nlwebToken a8e8f0c5a4f90c02bfddcb6881e7f6811da26864879a7bd6 -variables"+ // variables below must be executed all as one line
                                                 " ControllerAPIHostAndPort=10.0.0.10:7400"+
                                                 ",TargetHostBaseUrl=http://10.0.0.10"+
                                                 ",SeleniumHubHostAndPort=10.0.0.15:4444"+
                                                 ",JRE_JAVA=/home/neoload/neoload/jre/bin/java"+
                                                 " -project $WORKSPACE/neoload_68/yaml/demo-mixed.yaml"+ // static file from repo
                                                 " -project $WORKSPACE/yaml/eux-and-apm.yaml"+ // dynamic file from above
                                                 " --override-lg popPost=$WORKSPACE/neoload/lg/docker-lg.txt"+ // dynamic from above
                                                 " -L API_just_ushahidi=$WORKSPACE/neoload/lg/docker-lg.txt"+ // dynamic from above
                                                 " -L dynatracePop=$WORKSPACE/neoload/lg/local-lg.txt"+ // dynamic from above
                                                 " -L popSelenium=$WORKSPACE/neoload/lg/local-lg.txt"+ // dynamic from above
                                                 ""

                        } catch(Exception e) {
                          //sh "sleep 30s" // wait for reports to sync from node to master (Jenkins workaround)
                          // archive the dynamic stuff we did
                          archiveArtifacts "$WORKSPACE/yaml/eux-and-apm.yaml"
                          // archive the usual suspects
                          archiveArtifacts "logs/**"
                          archiveArtifacts "neoload-report/**"
                          junit allowEmptyResults: true, testResults: "neoload-report/junit*.xml"
                          // pass along the goodness
                          throw e
                        }
                      } else {
                        echo "E2E test skipped by configuration"
                      }
                    }
                }
            }
            stage('While Test Running') {
              steps {
                script {
                  if(env.ENABLE_FULL_WEB.toBoolean()) {
                    // make it easy to get to APM view of things (delay ~3min)
                    sh """
                    echo
                    echo --- Dynatrace Dashboard ---
                    echo "https://vwv51099.live.dynatrace.com/#dashboard;id=b832b009-8a4d-45fa-8488-33214bf07443;gtf=l_30_MINUTES"
                    echo ---
                    """
                  }
                }
              }
            }
          }
        }
      }
      post {
        failure {
          archiveArtifacts '/root/.neotys/neoload/v6.8/logs/**'
        }
      }
    }
    stage('After Test Exits') {
        steps {
          echo "Test exited without any process errors."
        }
    }
  }
  post {
      always {
        node('master') {
          sh 'docker-compose -f neoload/lg/docker-compose.yml down'
        }
      }
  }
}
