pipeline {
  agent {
    node {
      label 'docker-neoload-68'
    }
  }
  environment {
    WORKSPACE = pwd()
    API_TEST_DURATION = '3m'
    E2E_TEST_DURATION = '5m'
    EUX_THREADS = 2
    MAX_VUS_CHECKOUT = 50
  }
  stages {
    stage('Set up infrastructure') {
      agent { label 'master' }
      steps {
        git(branch: 'develop', url: 'https://github.com/paulsbruce/neoload_68.git')
        step([$class: 'DockerComposeBuilder', dockerComposeFile: 'pipeline/compose-lgs.yml', option: [$class: 'StartAllServices'], useCustomDockerComposeFile: true])
      }
    }
    stage('Pull latest version of Project from Git') {
      steps {
          git(branch: 'develop', url: 'https://github.com/paulsbruce/neoload_68.git')//, credentialsId: 'github-paulsbruce')
      }
    }
    stage('Define Dynamic Scenario') {
      steps {
        // create dynamic infrastructure pointers: docker-lgN is presumed already spun up by NLDeploy job
        writeFile file: "${env.WORKSPACE}/pipeline/lgs.txt", text: """
        docker-lg1@Docker\
        docker-lg2@Docker\
        """.trim()

        writeFile file: "${env.WORKSPACE}/yaml/api-only.yaml", text: """
scenarios:
- name: dynAPISanityCheck
  populations:
  - name: API_just_ushahidi
    rampup_load:
      duration: ${env.API_TEST_DURATION}
      min_users: 1
      max_users: 5
      increment_users: 1
      increment_every: 10s
          """


        // create a dynamic full scenario
        writeFile file: "${env.WORKSPACE}/yaml/eux-and-apm.yaml", text: """
scenarios:
- name: dynMixedScenarioEUXwAPM
  populations:
  - name: API_just_ushahidi
    rampup_load:
      duration: ${env.E2E_TEST_DURATION}
      min_users: 1
      max_users: 5
      increment_users: 1
      increment_every: 10s
  - name: popPost
    rampup_load:
      duration: ${env.E2E_TEST_DURATION}
      min_users: 1
      max_users: 15
      increment_users: 1
      increment_every: 15s
  - name: dynatracePop
    constant_load:
      duration: ${env.E2E_TEST_DURATION}
      users: 1
  - name: popSelenium
    rampup_load:
      duration: ${env.E2E_TEST_DURATION}
      min_users: 1
      max_users: ${env.EUX_THREADS}
      increment_users: 1
      increment_every: 20s
          """
      }
    }

    stage('API Sanity Check') {
        steps {
            script {
                neoloadRun project: "${env.WORKSPACE}/demo.nlp",
                    scenario: "dynAPISanityCheck",
                    testName: "API Sanity Check (build ${BUILD_NUMBER})",
                    testDescription: "A short, small API load test",
                    autoArchive: 'false', // will be streaming to NeoLoad Web, no need for classic report outputs
                    sharedLicense: [
                        server: 'NeoLoad Demo License',
                        duration: 1,
                        vuCount: env.MAX_VUS_CHECKOUT
                    ],
                    commandLineOption: "-nlweb"+
                                       " -project ${env.WORKSPACE}/yaml/demo-mixed.yaml"+ // static file from repo
                                       " -project ${env.WORKSPACE}/yaml/api-only.yaml"+ // dynamic file from above
                                       " -L API_just_ushahidi=${env.WORKSPACE}/pipeline/lgs.txt" // dynamic from above
            }
        }
    }

    stage('Main pipeline') {
      parallel {
        stage('While Test Running')
        {
          steps { // make it easy to get to APM view of things (delay ~3min)
            sh """
              echo
              echo --- Dynatrace Dashboard ---
              echo "https://vwv51099.live.dynatrace.com/#dashboard;id=b832b009-8a4d-45fa-8488-33214bf07443;gtf=l_30_MINUTES"
              echo ---
              """
          }
        }
        stage('Full E2E Load Test') {
            steps {
                script { // plugin for scripted pipeline, fit to declarative syntax
                    try { // archive results regardless of overall success/fail (could be due to SLAs)

                      neoloadRun project: "${env.WORKSPACE}/demo.nlp",
                          scenario: "dynMixedScenarioEUXwAPM",
                          testName: "Load Test w/ APM (build ${BUILD_NUMBER})",
                          testDescription: "Based on demo-mixed.yaml",
                          reportXml: "${env.WORKSPACE}/neoload-report/neoload-report.xml",
                          reportHtml: "${env.WORKSPACE}/neoload-report/neoload-report.html",
                          reportJunit: "${env.WORKSPACE}/neoload-report/junit-sla-results.xml",
                          trendGraphs: ['AvgResponseTime', 'ErrorRate'],
                          autoArchive: 'false', // by default, the plugin runs archiveArtifacts "neoload-report/**"; junit allowEmptyResults: true, testResults: 'neoload-report/junit*.xml'
                          sharedLicense: [
                              server: 'NeoLoad Demo License',
                              duration: 1,
                              vuCount: env.MAX_VUS_CHECKOUT
                          ],
                          commandLineOption: "-nlweb -variables "+ // variables below must be executed all as one line
                                             "ControllerAPIHostAndPort=10.0.0.10:7400,"+
                                             "TargetHostBaseUrl=http://10.0.0.10,"+
                                             "SeleniumHubHostAndPort=10.0.0.15:4444,"+
                                             "JRE_JAVA=/usr/local/neoload/jre/bin/java"+
                                             " -project ${env.WORKSPACE}/yaml/demo-mixed.yaml"+ // static file from repo
                                             " -project ${env.WORKSPACE}/yaml/eux-and-apm.yaml"+ // dynamic file from above
                                             //"" // TODO: remove this and uncomment below when infra is at v6.8
                                             " --override-lg popPost=${env.WORKSPACE}/pipeline/lgs.txt"+ // dynamic from above
                                             " -L API_just_ushahidi=${env.WORKSPACE}/pipeline/lgs.txt" // dynamic from above

                    } catch(Exception e) {
                      sh "sleep 60" // wait for reports to sync from node to master (Jenkins workaround)
                      // archive the dynamic stuff we did
                      archiveArtifacts "${env.WORKSPACE}/pipeline/lgs.txt"
                      archiveArtifacts "${env.WORKSPACE}/yaml/eux-and-apm.yaml"
                      // archive the usual suspects
                      archiveArtifacts "neoload-report/**"
                      junit allowEmptyResults: true, testResults: 'neoload-report/junit*.xml'
                      // pass along the goodness
                      throw e
                    }
                }
            }
        }
      }
    }
    stage('After Test Exits') {
        steps {
          echo "Test exited without any process errors."
        }
    }
  }
  post {
      always {
        node('master') {
          step([$class: 'DockerComposeBuilder', dockerComposeFile: 'pipeline/compose-lgs.yml', option: [$class: 'StopAllServices'], useCustomDockerComposeFile: true])
        }
      }
  }
}
